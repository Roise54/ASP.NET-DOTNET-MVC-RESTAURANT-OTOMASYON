// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestoranOtomasyonu.Data;

#nullable disable

namespace RestoranOtomasyonu.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("RestoranOtomasyonu.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lezzetli kebap çeşitlerimiz",
                            DisplayOrder = 1,
                            Name = "Kebaplar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fırından taze pideler",
                            DisplayOrder = 2,
                            Name = "Pideler"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sıcak çorbalar",
                            DisplayOrder = 3,
                            Name = "Çorbalar"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Taze salatalar",
                            DisplayOrder = 4,
                            Name = "Salatalar"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Soğuk ve sıcak içecekler",
                            DisplayOrder = 5,
                            Name = "İçecekler"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Geleneksel tatlılar",
                            DisplayOrder = 6,
                            Name = "Tatlılar"
                        });
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TableNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpicy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PortionSize")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Zırh ile çekilmiş et ve kuyruk yağı",
                            IsSpicy = true,
                            Name = "Adana Kebap",
                            PortionSize = "1 Porsiyon",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Zırh ile çekilmiş et",
                            IsSpicy = false,
                            Name = "Urfa Kebap",
                            PortionSize = "1 Porsiyon",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Kuşbaşı doğranmış dana eti",
                            IsSpicy = false,
                            Name = "Kuşbaşı Kebap",
                            PortionSize = "1 Porsiyon",
                            Price = 140.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "El açması hamur ile",
                            IsSpicy = false,
                            Name = "Kıymalı Pide",
                            PortionSize = "1 Adet",
                            Price = 80.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "El açması hamur ile",
                            IsSpicy = false,
                            Name = "Kuşbaşılı Pide",
                            PortionSize = "1 Adet",
                            Price = 90.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Geleneksel mercimek çorbası",
                            IsSpicy = false,
                            Name = "Mercimek Çorbası",
                            PortionSize = "1 Kase",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "Taze mevsim yeşillikleri",
                            IsSpicy = false,
                            Name = "Mevsim Salata",
                            PortionSize = "1 Porsiyon",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Description = "Taze ayran",
                            IsSpicy = false,
                            Name = "Ayran",
                            PortionSize = "1 Bardak",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            Description = "Antep fıstıklı künefe",
                            IsSpicy = false,
                            Name = "Künefe",
                            PortionSize = "1 Porsiyon",
                            Price = 70.00m
                        });
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.OrderItem", b =>
                {
                    b.HasOne("RestoranOtomasyonu.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestoranOtomasyonu.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.Product", b =>
                {
                    b.HasOne("RestoranOtomasyonu.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RestoranOtomasyonu.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
